<?php

namespace App\Http\Controllers;

use App\Models\UsersModel;
use App\Models\DoctorsModel;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use App\Helpers\TokenHelper;
use Carbon\Carbon;
use Illuminate\Support\Facades\Http;

class DoctorController extends Controller
{
    public function doctorLogin(Request $request)
    {
        // First get all the data sent from the client side
        $data = $request->all();

        // Next, validate these fields since these fields are mandatory to be filled by the doctor to login into the system
        $rules = array(
            'contact_number' => 'required',
        );

        // Validate the fields
        $validation = Validator::make($data, $rules);

        // Now, check whether validation fails or validate it as true
        if (!$validation->fails()) {
            try {
                // Begin transaction
                DB::beginTransaction();

                $doctorsModel = new DoctorsModel(); // Initialize DoctorsModel()

                // Creating random 4 digit otp numbers for authentication
                $otp = rand(1000, 9999);

                // Check whether doctor exists or not
                $doctor_exists = $doctorsModel->doctor_exists(['contact_number' => $data['contact_number']]);

                // If doctor does not exist then create a new one
                if (isset($doctor_exists) && $doctor_exists == false) {
                    $doctorsModel->create_doctor(['contact_number' => $data['contact_number']]);
                }

                // Update doctor otp into the database table for further verification
                $doctor_info = $doctorsModel->update_doctor(['contact_number' => $data['contact_number']], ['otp' => $otp]);
                
                // Execute this if condition if the current otp for the particular doctor is updated
                if (isset($doctor_info) && $doctor_info != "" && $doctor_info != 0) {

                    // Now prepare to send a otp to the particular doctor by calling a particular sms provider called "Bulk Sms"
                    $user_name = "ryves";
                    $password = "6338/*-!!@dfjsldRR9";

                    // Encoded Key is generated by combining the user_name and password
                    $encoded_key = base64_encode($user_name.':'.$password);

                    $send_otp_api_url = "https://api.bulksms.com/v1/messages";

                    // Create Authorization by comibing Basic and encoded
                    $authorization = "Basic ".$encoded_key ;
        
                    // Create Headers
                    $headers = [
                        'Authorization' => $authorization,
                    ];

                    // Create OTP Message
                    $body = "Hello, your Skinova OTP: $otp. Keep it private.";

                    // Create Data that need to posted
                    $postData = [
                        'to' => '+91'.$data['contact_number'],
                        'routingGroup' => "ECONOMY",
                        'encoding' => "TEXT",
                        'body' => $body,
                        'userSuppliedId' => rand(100, 999),
                    ];
        
                    // Get the response from the bulksms
                    $response = Http::asForm()
                        ->withHeaders($headers)
                        ->post($send_otp_api_url, $postData);
                    
                    //Execute this if condition if the returned response is 201 (Created) 
                    if (isset($response) && $response->status() == 201) {
                        $result = array(
                            'success' => true,
                            'message' => 'OTP Message Sent Successfully'
                        );
                    } else {
                        $result = array(
                            'success' => false,
                            'error' => array(
                                'error_code' => 'E002',
                                'error_message' => 'Error while login.'
                            )
                        );
                    }
                    // Commit DB Transaction, if everything went perfect
                    DB::commit();
                } else {
                    DB::rollBack();
                    $result = array(
                        'success' => false,
                        'error' => array(
                            'error_code' => 'E003',
                            'error_message' => 'Error while updating doctor otp.'
                        )
                    );
                }
            } catch (\Exception $e) {
                DB::rollBack();
                Log::info('Exception While Sending OTP');
                Log::info($e->getMessage());
                Log::info($e);

                $result = array(
                    'success' => false,
                    'error' => array(
                        'error_code' => 'E002',
                        'error_message' => 'Error while sending otp.'
                    )
                );
            }
        } 
        // If validation fails, return with an error saying some fields are mandatory that need to be filled before login
        else {
            $result = array(
                'success' => false,
                'error' => array(
                    'error_code' => 'E001',
                    'error_message' => $validation->errors()
                )
            );
        }

        return json_encode($result);
    }

    public function verifyDoctorOTP(Request $request)
    {
        // First get all the data sent from the client side
        $data = $request->all();

        // Next, validate these fields since these fields are mandatory to be filled by the doctor
        $rules = array(
            'contact_number' => 'required',
            'otp' => 'required',
        );

        // Validate the fields
        $validation = Validator::make($data, $rules);

        // Now, check whether validation fails or validate it as true
        if (!$validation->fails()) {
            try {
                // Begin transaction
                DB::beginTransaction();

                $doctorsModel = new DoctorsModel(); // Initialize DoctorsModel()

                // doctors Data that need to be verified
                $doctors_data = array(
                    'contact_number' => $data['contact_number'],
                    'otp' => $data['otp'],
                );

                // Fetch particular user data by passing the above $doctors_data
                $doctor_info = $doctorsModel->get_doctor($doctors_data);
                
                if (isset($doctor_info) && $doctor_info != "") {

                    // Since otp is verified, re-update the otp field to null
                    $doctorsModel->update_doctor(['contact_number' => $data['contact_number']], ['otp' => null]);

                    // Commit the changes
                    DB::commit();

                    //Token Payload Data 
                    $payload = array(
                        'doctor_info' => $doctor_info,
                        'user_role' => 'doctor' // This defines the type of user who is logging into application
                    );

                    // Generate Token
                    $token = TokenHelper::generateToken($payload);

                    // Add this generated token into doctor_info array
                    $doctor_info['token'] = $token;

                    $result = array(
                        'success' => true,
                        'data' => array(
                            'message' => 'OTP Verified Successfully',
                            'doctor_info' => $doctor_info,
                        )
                    );
                } else {
                    DB::rollBack();
                    $result = array(
                        'success' => false,
                        'error' => array(
                            'error_code' => 'E003',
                            'error_message' => 'Invalid OTP'
                        )
                    );
                }                
            } catch (\Exception $e) {
                DB::rollBack();
                Log::info('Exception while validating otp.');
                Log::info($e->getMessage());
                Log::info($e);

                $result = array(
                    'success' => false,
                    'error' => array(
                        'error_code' => 'E002',
                        'error_message' => 'Error while validating otp.'
                    )
                );
            }
        } 
        // If validation fails, return with an error saying some fields are mandatory that need to be filled before creation of new doctor
        else {
            $result = array(
                'success' => false,
                'error' => array(
                    'error_code' => 'E001',
                    'error_message' => $validation->errors()
                )
            );
        }

        return json_encode($result);
    }

    public function doctorUpdateProfile(Request $request)
    {
        // First get all the data sent from the client side
        $data = $request->all();

        // Next, validate these fields since these fields are mandatory to be filled by the doctor & they are used to create a new doctor
        $rules = array(
            'full_name' => 'required',
            'education' => 'required',
            'specialization' => 'required',
            'email_id' => 'required|email',
            'contact_number' => 'required',
            'hospital_name' => 'required',
            'hospital_address' => 'required',
            'hosptial_starts_at' => 'required', // Start Time is in 12 Hour Format
            'hospital_ends_at' => 'required', // End Time is in 12 Hour Format
            'consultation_fees' => 'required',
        );

        // Validate the fields
        $validation = Validator::make($data, $rules);

        // Now, check whether validation fails or validate it as true
        if (!$validation->fails()) {
            try {
                // Begin transaction
                DB::beginTransaction();

                $doctorsModel = new DoctorsModel(); // Initialize DoctorsModel()

                // Validate time format and this is how the format must be when we accept the start and end time from the frontend
                $validFormat = function ($time) {
                    return (bool) preg_match('/^(0?[1-9]|1[0-2]):[0-5][0-9] (AM|PM)$/i', $time);
                };

                if (!$validFormat($data['hosptial_starts_at']) || !$validFormat($data['hospital_ends_at'])) {
                    return json_encode([
                        'success' => false, 
                        'error' => [
                            'error_code' => 'E006',
                            'error_message' => 'Invalid time format. Please enter times in the format HH:MM AM/PM.'
                            ]
                        ]
                    );
                }   
                
                // Convert the 12 Hour Time to 24 Hour Format 
                $startTime24HourFormat = Carbon::createFromFormat('h:i A', $data['hosptial_starts_at'])->format('H:i');
                $endTime24HourFormat  = Carbon::createFromFormat('h:i A', $data['hospital_ends_at'])->format('H:i');

                // Convert times to Carbon objects for comparison
                $start = Carbon::createFromFormat('H:i', $startTime24HourFormat);
                $end = Carbon::createFromFormat('H:i', $endTime24HourFormat);

                // Check if end time is greater than start time
                if ($end->lessThanOrEqualTo($start)) {
                    return json_encode([
                        'success' => false, 
                        'error' => [
                            'error_code' => 'E005',
                            'error_message' => 'End time cannot be less than or equal to start time.'
                            ]
                        ]
                    );
                }

                // Check if there is at least 30 minutes difference between start and end time
                if ($end->diffInMinutes($start) < 30) {
                    return json_encode([
                        'success' => false, 
                        'error' => [
                            'error_code' => 'E004',
                            'error_message' => 'There must be at least 30 minutes difference between start and end time.'
                            ]
                        ]
                    );
                }

                // If we do not encounter any error in the above calculations then proceed with storing the data into the database
                // Doctors Data that need to be inserted into the database table named 'doctors'
                $doctor_data = array(
                    'full_name' => $data['full_name'],
                    'education' => $data['education'],
                    'specialization' => $data['specialization'],
                    'email_id' => $data['email_id'],
                    'contact_number' => $data['contact_number'],
                    'profile_image' => (isset($data['profile_image']) && $data['profile_image'] != "") ? $data['profile_image'] : null,
                    'hospital_name' => $data['hospital_name'],
                    'hospital_address' => $data['hospital_address'],
                    'hosptial_starts_at' => $startTime24HourFormat,
                    'hospital_ends_at' => $endTime24HourFormat,
                    'consultation_fees' => $data['consultation_fees'],
                    'is_profile_completed' => 1,
                );

                // Update User Data Query
                $doctor_result = $doctorsModel->update_doctor(['contact_number' => $data['contact_number']], $doctor_data);
                if (!empty($doctor_result) && $doctor_result != "" && $doctor_result != 0) {

                    // Commit the changes into the database
                    DB::commit();

                    $doctor_info = $doctorsModel->get_doctor(['contact_number' => $data['contact_number']]);

                    //Token Payload Data 
                    $payload = array(
                        'doctor_info' => $doctor_info,
                        'user_role' => 'doctor' // This defines the type of user who is logging into application
                    );

                    // Generate Token
                    $token = TokenHelper::generateToken($payload);

                    // Add this generated token into doctor_info array
                    $doctor_info['token'] = $token;

                    $result = array(
                        'success' => true,
                        'data' => array(
                            'message' => 'Profile Updated Successfully.',
                            'doctor_info' => $doctor_info
                        )
                    );
                } else {
                    DB::rollBack();
                    $result = array(
                        'success' => false,
                        'error' => array(
                            'error_code' => 'E003',
                            'error_message' => 'Error While Updating.'
                        )
                    );              
                }
            } catch (\Exception $e) {
                DB::rollBack();
                Log::info('Exception During User Updation.');
                Log::info($e->getMessage());
                Log::info($e);

                $result = array(
                    'success' => false,
                    'error' => array(
                        'error_code' => 'E002',
                        'error_message' => 'Error while updating.'
                    )
                );
            }
        } 
        // If validation fails, return with an error saying some fields are mandatory that need to be filled before creation of new user
        else {
            $result = array(
                'success' => false,
                'error' => array(
                    'error_code' => 'E001',
                    'error_message' => $validation->errors()
                )
            );
        }

        return json_encode($result);
    }
}